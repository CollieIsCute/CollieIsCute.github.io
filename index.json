[{"categories":null,"content":"原始題目 給定字串包含 { '+', '-', ' ', '(', ')'} 以及數字，求出算式答案。 ","date":"2022 Nov 22","objectID":"/224/:1:0","tags":["leetcode","iterator","C++"],"title":"224. Basic Calculator","uri":"/224/"},{"categories":null,"content":"值得紀錄之處 ","date":"2022 Nov 22","objectID":"/224/:2:0","tags":["leetcode","iterator","C++"],"title":"224. Basic Calculator","uri":"/224/"},{"categories":null,"content":"處理太多條件分支 我覺得這題最麻煩的坑在於符號太多種了。如果用 if 來寫的話，會有太多條件分支（ branch condition ），所以我一直很想把某些 branch 合在一起。比如說： +, - 後面跟著 ( +, - 後面跟著數字 +, - 後面是 , 而再之後還可以混合前兩項組合出更多種變化。 這樣乘起來情況非常多，也很難維護。如果可以忽略掉 +, -, 只在遇到數字和 ( 的時候，再往回檢查符號，就可以減少需要列舉的情況數量了。 ","date":"2022 Nov 22","objectID":"/224/:2:1","tags":["leetcode","iterator","C++"],"title":"224. Basic Calculator","uri":"/224/"},{"categories":null,"content":"處理空格： erase + remove_if 如果可以使得字串裡面完全沒有空格，那需要處理的情況也可以再更加精簡。 C++ 裡面有一套 erase + remove_if 組合技可以用： s.erase(remove_if(s.begin(), s.end(), [](unsigned char ch) { return std::isspace(ch); }), s.end()); remove 系列 v.s. erase 這兩個我以前都一直搞不清楚差異，直到寫這題時認真去研究他們之間的差別並紀錄於此。 ForwardIt remove(ForwardIt first, ForwardIt last, const T\u0026 value): 它在做的事情是移動元素，並不包含刪除元素本身。如果 [first, end) 區間內有任何元素的值 == value 則把後面的資料指派給目前這一格元素，最後再回傳一個 iterator 物件當作待會要 erase() 的起始點，時間複雜度比寫個迴圈不斷 find 並刪除快很多（ $O(n^2)$ v.s. $O(n)$ ），我覺得 cppreference 複製過來的實作蠻有趣的，有興趣的話推薦讀看看。 template\u003c class ForwardIt, class T \u003e ForwardIt remove(ForwardIt first, ForwardIt last, const T\u0026 value) { first = std::find(first, last, value); if (first != last) for(ForwardIt i = first; ++i != last; ) if (!(*i == value)) *first++ = std::move(*i); return first; } 至於 erase() 則是可以傳入頭尾兩個 iterator 參數，刪除該區間並且把頭尾接上。 remove_if() 跟 remove() 有點像，只是第三個參數是放一個回傳值可被轉成 bool 的函數。它會去呼叫那個函數，並從回傳值判斷要不要 remove 掉元素內的資料。 ","date":"2022 Nov 22","objectID":"/224/:2:2","tags":["leetcode","iterator","C++"],"title":"224. Basic Calculator","uri":"/224/"},{"categories":null,"content":"stack 處理變號 直覺上採用 stack 來判斷括號內區域要不要變號，進入括號就 push 一個新的符號，離開括號則 pop 最上面的符號，即可完成判斷。（如果有 *, / 會比較麻煩，要多處理四則運算優先度的問題，還好這題不用😅） ","date":"2022 Nov 22","objectID":"/224/:2:3","tags":["leetcode","iterator","C++"],"title":"224. Basic Calculator","uri":"/224/"},{"categories":null,"content":"iterator 問題 似乎不能把他理解為按照大小排列的指標，紀錄我把他當作指標用時遇到的坑： 沒有 \u003c= operator, 如果用以下的寫法會有問題。要寫成 != 才正統。 for(auto it = obj.begin(); it \u003c= obj.end(); obj++){ // do something } iterator 沒有直接加上某個常數的運算，但是指標有這種 Syntactic sugar 可以自動根據型別決定要往前多少個 bytes. auto it = obj.begin(); // auto it = it + 3; // 沒有這種運算 std::advance(it, 3); // 好用的移動多步工具 如果之後能夠更深入了解 iterator 的底層實作，再來寫一篇紀錄我對於 iterator 的了解好了😆 ","date":"2022 Nov 22","objectID":"/224/:2:4","tags":["leetcode","iterator","C++"],"title":"224. Basic Calculator","uri":"/224/"},{"categories":null,"content":"Solution 原本想多了解 iterator, 可是寫完 AC 之後發現他有不少需要往前往後跳多格的操作，還是 index 的寫法可以比較簡短，因此最後又改回現在這樣了😛 // after parsing, put `it` represent the last digit of num int parse_num(int\u0026 num_head, const string\u0026 s){ int cnt = 0, sign = (num_head \u003e 0 \u0026\u0026 s[num_head - 1] == '-') ? -1 : 1; for(; isdigit(s[num_head + cnt]); cnt++) ; int n = stoi(s.substr(num_head, cnt)); num_head += (cnt - 1); return n * sign; } class Solution { public: int calculate(string s) { s.erase(remove_if(s.begin(), s.end(), [](unsigned char ch) { return std::isspace(ch); }), s.end()); stack\u003cint\u003e sign_stack{}; int ret = 0, cur_sign = 1; for(auto it = 0; it \u003c s.size(); it++) if(isdigit(s[it])) ret += parse_num(it, s) * cur_sign; else if(s[it] == '('){ if(it\u003e0 \u0026\u0026 s[it-1] == '-') sign_stack.push(-1); else sign_stack.push(1); cur_sign *= sign_stack.top(); } else if(s[it] == ')'){ cur_sign /= sign_stack.top(); sign_stack.pop(); } return ret; } }; ","date":"2022 Nov 22","objectID":"/224/:3:0","tags":["leetcode","iterator","C++"],"title":"224. Basic Calculator","uri":"/224/"},{"categories":null,"content":"拜讀了你所不知道的 C 語言： linked list 和非連續記憶體一文中所提到的 “good taste” 段落 , 覺得非常有趣而躍躍欲試，所以找這題來練練手。（後來發現底下的例子也有寫到這題😅，而且效率又比我想到的解更好，甚至還有一些記憶體管理的細節，學到了！） ","date":"2022 Oct 22","objectID":"/2095/:0:0","tags":["leetcode","indirect pointer","C++"],"title":"2095. Delete the Middle Node of a Linked List","uri":"/2095/"},{"categories":null,"content":"原始題目 這題是給定一個不固定長度 $n$ 的鏈結串列，然後要求刪除最中間的那個節點（ node ） （精確來說是第 $\\lfloor \\frac{n}{2} \\rfloor$ 個節點） ","date":"2022 Oct 22","objectID":"/2095/:1:0","tags":["leetcode","indirect pointer","C++"],"title":"2095. Delete the Middle Node of a Linked List","uri":"/2095/"},{"categories":null,"content":"值得紀錄之處 這裡所謂的 good taste 是指利用一些技巧，去減少「特例」發生的情形，進而使程式碼更加乾脆俐落。舉例來說，原本在這題常見的解法有兩種： 先用迴圈把整個鏈結串列遍歷，計算有幾個節點。算完再跑一次 for 迴圈把最中間的節點刪除。 利用 fast 和 slow 兩指標，丟進迴圈裡面， fast 每回合前進兩格， slow 每回合前進一格，這樣只要一次迴圈就可以抓到要刪除的節點並且刪除。 附註 兩者的時間複雜度都是 $\\log (n)$, 但是後者的程式碼量會因為少一個迴圈而比較少，因此我以後者為比較標準。 ","date":"2022 Oct 22","objectID":"/2095/:2:0","tags":["leetcode","indirect pointer","C++"],"title":"2095. Delete the Middle Node of a Linked List","uri":"/2095/"},{"categories":null,"content":"非 indirect pointer 的解 此程式碼取自 leetcode 論壇的某位大大寫的詳解文章微調而得 class Solution { public: ListNode* deleteMiddle(ListNode* head) { if (head -\u003e next == nullptr) return nullptr; ListNode *slow = head, *fast = head -\u003e next -\u003e next; while (fast != nullptr \u0026\u0026 fast -\u003e next != nullptr) { slow = slow -\u003e next; fast = fast -\u003e next -\u003e next; } slow -\u003e next = slow -\u003e next -\u003e next; return head; } }; 可以注意到，上面的解法 (line 4) 會有一個特例 (edge case), 如果開頭是 nullptr, 那就如何如何……。有時候特例一多，可能會寫了整面的 if-else, 看了就痛苦😵‍💫。如果有個魔法可以使這個特例更減少，那程式碼就可以更精簡，這也是我這次的練習目標。 因為題意規定 1 \u003c= node.size() \u003c= 100000, 因此前者的原本的做法： 不用判斷是否為空 list 要判斷是否只有一個 node, 若是只有一個 node, 則把該 node 刪除 若非只有一個 node, 則按照 fast, slow 做法從頭開始經過此 list 每個節點。 注意 如果我想操作 slow 指標來達成刪除的功能（暫不探討釋放記憶體的部分），就需要把被刪除的目標前一個 node 的 node-\u003enext 指向目標後一個 node 的 node-\u003enext, 所以最後 slow 會指向目標的上一個 node, 而 slow-\u003enext 才是要被刪除的節點。(前述程式碼 line 11) 另外根據題意可得，當 list 具有 1 個 node 跟 2~3 個 node 時，需要刪除的目標會不一樣 。 這會有個問題：我沒辦法巧妙的透過 initialize slow 跟 fast 兩個指標, 使得 edge case 被消滅。換言之，當 list 只有 1 個 node 的時候，我需要特別操作 head 而不是 slow, 才能把目標 node 刪除。 因此才有了下面 indirect pointer 的解法。 承上所述，我會需要某個「東西」，這個東西有辦法視情況具有 head 或 slow 的功能，而那個東西就是間接指標 (indirect pointer) ，一種指向指標的記憶體位址的指標（有點繞舌😆）。 原本 slow 無法對 head 造成影響 使用 indirect_del 可以修改 head 刪除前 // 因為沒有 edge case, 所以跟後面刪除中間節點的程式碼可以一樣 *indirect_del = (*indirect_del)-\u003enext; 刪除後 使用 indirect_del 也可以刪除中間的任意節點 刪除前 *indirect_del = (*indirect_del)-\u003enext; 刪除後 ","date":"2022 Oct 22","objectID":"/2095/:2:1","tags":["leetcode","indirect pointer","C++"],"title":"2095. Delete the Middle Node of a Linked List","uri":"/2095/"},{"categories":null,"content":"indirect pointer 的解 (這個魔法我在原文花了好幾個小時反覆研究了很多遍，一開始覺得超級不好懂XD) class Solution { public: ListNode* deleteMiddle(ListNode* head) { ListNode **indirect_del = \u0026head, *fast = head; // 利用 go_next 去判斷 indirect_del 需不需要前進一格 for(bool go_next = false; fast; fast = fast-\u003enext, go_next = !go_next) indirect_del = go_next ? \u0026(*indirect_del)-\u003enext : indirect_del; *indirect_del = (*indirect_del)-\u003enext; return head; } }; 因為多了這層「間接的關聯」， indirect_del 一開始是指向 head 的地址，因此可以快樂地除去前述惱人的 edge case. 之後 indirect_del 又可以指向任何一個 node 的 node-\u003enext 指標，以獲得所有指標的功能。到這邊可能要多對照幾次兩者之間有無 “indirect pointer” 的差別會比較容易理解，理解之後不禁感嘆程式這門藝術真是博大精深！ ","date":"2022 Oct 22","objectID":"/2095/:2:2","tags":["leetcode","indirect pointer","C++"],"title":"2095. Delete the Middle Node of a Linked List","uri":"/2095/"},{"categories":null,"content":"部落格的 leetcode 區用途 ","date":"2022 Oct 11","objectID":"/leetcode_homepage/:1:0","tags":["leetcode","daily"],"title":"Leetcode 區","uri":"/leetcode_homepage/"},{"categories":null,"content":"leetcode 區文章列表 ","date":"2022 Oct 11","objectID":"/leetcode_homepage/:1:1","tags":["leetcode","daily"],"title":"Leetcode 區","uri":"/leetcode_homepage/"},{"categories":null,"content":"solutions source code ","date":"2022 Oct 11","objectID":"/leetcode_homepage/:1:2","tags":["leetcode","daily"],"title":"Leetcode 區","uri":"/leetcode_homepage/"},{"categories":null,"content":"想要在這個 leetcode 文章區紀錄 我在刷題時遇到的一些坑 看完覺得很酷的解題技巧 一些亂搞的奇技淫巧(可能是好笑的假解之類的~) 之後考慮在底下加上一個列表，可以自動更新並且記錄我的 AC 題目號碼以及題目名稱。但是目前看起來沒有很好用的輪子可以直接拿來用(目前看起來最接近的輪子，理論上可以做到每次 commit 這個部落格 repo 的時候透過 hook 自動更新 md, 但還是覺得不夠及時)，可能很久很久以後才會加 XDD ","date":"2022 Oct 11","objectID":"/leetcode_homepage/:1:3","tags":["leetcode","daily"],"title":"Leetcode 區","uri":"/leetcode_homepage/"},{"categories":null,"content":"Leetcode 解題狀態 ","date":"2022 Oct 11","objectID":"/leetcode_homepage/:2:0","tags":["leetcode","daily"],"title":"Leetcode 區","uri":"/leetcode_homepage/"},{"categories":null,"content":"內容預告 這篇預計會介紹我怎麼從前端白紙，用了哪些工具、如何設定、然後成功弄出一個可以正常瀏覽的部落格～ 內容待補 ","date":"2022 Oct 08","objectID":"/blog101/:1:0","tags":["blog","docker","hugo"],"title":"blog 101","uri":"/blog101/"},{"categories":null,"content":" 這是我在大四下考駕照的紀錄，僅以此獻給我偉大的駕訓班 裏鍵張 教練。 （這是假名，如有雷同純屬巧合） 寫這個不是為了要罵他或報復他，只是想記錄我經歷了多荒謬的事情才拿到這張卡。得來不易啊！ 我是去一間在鳳山附近，叫做新永的駕訓班。因為湊團報，所以也沒有看評價，（ google map 上面的評價有多精彩晚點再說，那又是另一個故事）就跟同學找一找直接無腦衝。想不到，精彩的地獄生活就這樣開始… ","date":"2022 Apr 06","objectID":"/1/:0:0","tags":["daily"],"title":"考駕照奇遇記-1","uri":"/1/"},{"categories":null,"content":"「我很重視基本功」 第一天我比約定的時間（06:40 am）還要早了 10 幾分鐘到，我對他印象不錯。他比我早就到練習場了。他每次都非常早到練習場，之前同學也說要早點到，這樣就可以多開幾分鐘的車。 「我很重視基本功，所以一開始你就先練習轉方向盤。」 我那天真的就只有聽他長篇大論，和坐在一台沒辦法動的練習車上面轉方向盤。 後來聽說好像是因為那天駕訓班沒有車可以讓我開，我不太確定。 他覺得轉方向盤非常的重要，如果沒有左手跟右手分別放在九點跟三點鐘的位置，那就會很嚴重。於是我的第一天就真的只有練轉方向盤，直到下課前 10 分鐘就叫我離開教具車，去駕訓班的櫃檯電腦練習筆試題目。接下來的每次駕訓班課程也都會像這樣被他偷 10 分鐘以上。第一天就在這種疑惑中結束。結束之後去吃早餐跟同學交換心得，其他人在練習前進後退，我只有轉方向盤的心得可以討論，真是謝囉ㄏㄏ ","date":"2022 Apr 06","objectID":"/1/:1:0","tags":["daily"],"title":"考駕照奇遇記-1","uri":"/1/"},{"categories":null,"content":"「你覺得原因是什麼」 第二節課開始，我還是提早 10 幾分鐘到場。我想說昨天血虧，連油門都沒有摸到，今天要給他開回來。教練也很不負我望，教我念一次各種檢查的口訣，認得車子編號（駕訓場內每台車有個比車牌還大的編號牌，方便從側面辨識。）之後就上車。 可是我坐後座… ","date":"2022 Apr 06","objectID":"/1/:2:0","tags":["daily"],"title":"考駕照奇遇記-1","uri":"/1/"},{"categories":null,"content":"碎碎念又要開始了 「你看，看仔細，我現在是不是把方向盤放開讓他回到原位了？」 是 「仔細看喔」 （接著就緩慢地往前開一段，車子偏掉了） 「你看車子是不是歪掉了？」 是 「你覺得原因是什麼？」 因為方向盤有誤差嗎？ 「不是，給你兩個提示：1. 下雨 2. 積水」 … （沒有答案於是沈默） 我開始不知道他到底在幹嘛了，原來駕訓班一萬多塊的課程還包含益智遊戲環節。 「你需要一點想像力啊。我就說你們現在的學生齁，只知道滑手機，都不會觀察生活周遭的環境。你覺得為什麼會積水？」 因為路面的高度不同？ 「不是啦！你真的很沒有邏輯內，都給你這麼多線索還猜不到，」 我這輩子好像也沒有幾次被嗆過沒有邏輯，害我隱隱不爽之餘也好奇他到底能吐出什麼好答案來。 「就是因為路不平嘛！」 … （這到底跟我剛剛說的有什麼不一樣？氣到不知道要回什麼了） 所以我剛剛到現在就這樣聽你講有的沒的聽 10 幾分鐘，就為了學您的邏輯推理嗎？我決定之後要用最簡短的回答快速跳過這個廢話劇情，不然我今天又是來聽演講的，真的是在哭 「你們要多讀點書啦！你看教練就是讀很多書(以下省略ㄧ分鐘碎念)……」（他在講這句的時候一直用一種非常嘲諷地快速搖頭 + 嘆氣。這個行為非常的令人煩躁，往後也會不斷出現，如果 google map 評分有激怒學員這項我一定給他滿分） 後來翻了一下 google map 評論，還發現真的也有其他人被他的快速搖頭羞辱XD 後來又聽他介紹了一下要用車子的哪個部位對齊路面，我想每個教練應該都大同小異，就跳過不寫。最後我只「順利」的開了前進後退兩三趟，就被教練指示開去停車了呢！真棒，我停車還賺到一個轉彎，今天收穫真豐碩。開車一點都不重要，能夠聽到要我讀書以及邏輯很差的建議才是對我人生最有幫助的呢！ ","date":"2022 Apr 06","objectID":"/1/:2:1","tags":["daily"],"title":"考駕照奇遇記-1","uri":"/1/"},{"categories":null,"content":"全場滑手機 滑手機也是他的個人特色。我覺得應該可以這麼說，「在整個駕訓班課程內，他的手機跟他的嘴巴至少有一個東西會打開。當然，兩個都打開的情形也是不在少數。」當他講完前進後退之後，我們兩個剛換完座位就看到他開始滑手機。有時候他會盯著螢幕突然冒出一句：「油門/煞車不要踩那麼大力！」或者是「煞車不要踩那麼快！」等等警告，會不會其實他滑 line 只是偽裝，其實他的目的是在偷偷觀察我🤨？ 後來他在群組傳的各種通知訊息文法狗屁不通、句讀亂用。我只能從分開的詞彙推敲文意，這也更使我相信上述的推測。 ","date":"2022 Apr 06","objectID":"/2/:1:0","tags":["daily"],"title":"考駕照奇遇記-2 (完)","uri":"/2/"},{"categories":null,"content":"家人怎麼教你騎腳踏車 我忘記他是為了教什麼才會舉這個問題當作例子問我們，但我印象中這不是個精闢的比喻，只是個可有可無的例子。我本來覺得這個問題也沒什麼荒謬的點，只是課堂加入一些無謂的問答會使練習時間縮短，因此不喜歡他迂迴曲折的講解。不過這則 google map 評論使我笑出來，所以還是把它記錄在這篇文。 ","date":"2022 Apr 06","objectID":"/2/:2:0","tags":["daily"],"title":"考駕照奇遇記-2 (完)","uri":"/2/"},{"categories":null,"content":"物極必反相對論 「物極必反相對論！」 這句格言在整個駕訓班課程不斷從他的口中聽到。它在我的印象中實在太有記憶點了。因為根據我的理解，物極必反是個四個字的成語，大概是在講中庸之道比較好，太過頭也容易產生反效果或者失敗等等……的意思。至於相對論則是物理學上某個用來描述光速跟時間有關的理論。 我大概有十天左右一直聽到這個詞彙卻不知其所以然，但本著節省時間練習開車的中心思想，我是絕對不會開口問的XD 直到有一天，我突然想通：「啊！左轉方向盤之後不就是要往右轉回來嗎？他該不會說的就是這個吧？」回想情境印證一下果然沒錯，是這個意思。頓時有點開心自己終於聽懂他到底在講什麼鬼，但同時也擔心自己是不是語言能力壞死所以終於可以理解這句話的「深意」。順便跟自己約定之後要盡量避免跟他溝通以降低自己上課時的血壓。 我只想問到底怎麼有人可以把中文講成這樣？為什麼不要就直接講方向盤就好啊啊啊啊啊（崩潰 ","date":"2022 Apr 06","objectID":"/2/:3:0","tags":["daily"],"title":"考駕照奇遇記-2 (完)","uri":"/2/"},{"categories":null,"content":"你覺得我的時薪有多少 「你知道為什麼教練都沒有年輕人嗎？」 「因為駕訓班教練薪水太少了。你覺得我的時薪有多少？」 我認真地估了一下，整個練習課程每天一小時 （扣掉被他叫去電腦刷題偷時間） ，持續一個月，平日上課假日放假。整個課程教練會有一半時間會在車上，後半課程會是一個小時都自己練習，沒有噪音的歡樂練車時光 可以快速累積控車的經驗。 應該是每小時四百吧？ 「四百你給我啊（伸手）」 後來聽他講，好像一個小時才一百多。我是不太相信啦，因為感覺教練有下場工作，應該可以拿更多才對？駕訓班除了油錢、車子保養跟講課的宣導費用（數十人分攤一位講者），還會需要其他支出嗎？ ","date":"2022 Apr 06","objectID":"/2/:4:0","tags":["daily"],"title":"考駕照奇遇記-2 (完)","uri":"/2/"},{"categories":null,"content":"心得（對於想考駕照的人真正有用的部分XD） ","date":"2022 Apr 06","objectID":"/2/:5:0","tags":["daily"],"title":"考駕照奇遇記-2 (完)","uri":"/2/"},{"categories":null,"content":"一般可能比較需要注意的小細節 在駕訓班要想辦法讓教練趕快講完自己開，廢話十句不如自己開錯學到一個經驗。 我以為同一個駕訓班的教法都會一樣。想不到李教練教我開 S 型的開法，被驗收的另一位教練（好像規定指導教練跟駕照驗收教練不能相同）說很容易出錯，一直叫我方向盤要轉多一點怎麼樣的XD 反正就以當下坐在車上的教練為主，他們心情好考試就容易過～ ","date":"2022 Apr 06","objectID":"/2/:5:1","tags":["daily"],"title":"考駕照奇遇記-2 (完)","uri":"/2/"},{"categories":null,"content":"如果想考手排 一開始教練好像會為了衝駕訓班的通過率，拼命恐嚇＋威逼利誘我，想讓我改考自排(手排比自排還要容易熄火)。所以我一開始很挫，很想拼命爭取自己練習的時間來降低手排熄火的機率。 我下課後也沒有特別練，只是該練習我就都不會缺課，練習時間應該是足夠讓手排車穩穩考過駕照的。 我到最後練得差不多了，還是有剩幾堂課的練習時間沒用完。多出來的時間被我拿來挑戰快速開 S 型彎道，玩到最高紀錄是進去出來只花了 55 秒，不能熄火也不能擦到旁邊安全島有夠刺激🤪 後來考試的教練還說我油門跟煞車控制得很穩，聽他講起來應該算是高標。所以想考手排的人不用理教練的威逼利誘，衝就對了！ ","date":"2022 Apr 06","objectID":"/2/:5:2","tags":["daily"],"title":"考駕照奇遇記-2 (完)","uri":"/2/"},{"categories":null,"content":"後記 好啦，李教練其實也不全都是缺點，也是要看看人家的優點。我覺得他很準時，而且跟他請假他會願意讓我在別的時段補課。沒了。 這間駕訓班好像其他教練也有在 google map 上被罵，但是我的李教練應該就是籤王了。但即使是籤王也是有人給他 google map 好評，去之前可以先看他被罵的部分自己能不能接受。當然也有遇到人家的教練對我很親切的～算是要挑教練的駕訓班，不知道其他間如何。 一起去的同學教了我一招：「我到後面已經不想理他，他不管說什麼我都說好。結果後來他罵我：『你車子開那麼左邊，旁邊是要再停一輛摩托車嗎？』我也回他：『好。』從那次之後他就閉嘴了」 ","date":"2022 Apr 06","objectID":"/2/:6:0","tags":["daily"],"title":"考駕照奇遇記-2 (完)","uri":"/2/"}]